# vim:set ft=peg:

# The form of a sed command is as follows:
#      [address[,address]]function[arguments]
# Whitespace may be inserted before the first address and the function portions
# of the command.

commands <- command ((eol / semicolon)+ command)* eol+ !.
command <- space* function space* comment?

# addr {{{
# 0addr negation might look odd, but it allows for rudimentary factoring like:
#
#   !{:common; s/foo/bar/; ... }
#   /a/ { s/a/b/; b common }
#   /b/ { s/b/a/; b common }
addr_0 <- negate?
addr_1 <- address_type space* negate?
addr_2 <- address_type ',' address_type space* negate?
# TODO pattern address escapes
address_type <- [0-9]+ / '$' / ('/' (!'/' .)* '/')
negate <- '!' space* !'!'
# }}}

# function {{{
function <-
  # 0addr
  (addr_0)? (set_label / comment) /
  # 1addr
  (addr_1 / addr_0)? (
    'a' / 'i' / 'q' / 'r') /
  # 2addr
  (addr_2 / addr_1 / addr_0)? (
    function_list /
    change /
    branch /
    test /
    delete /
    'D' / 'g' / 'G' / 'h' / 'H' / 'x' / 'n' /
    append_next /
    'l' /
    print /
    'P' /
    substitute /
    write /
    transliterate)
# }}}

# { is a "function", but is a bit special.  It can span multiple lines, and
# internally has 0..n further functions.  POSIX.1 specifies "a list", but GNU
# sed does allow an empty body.  The commands are delimited by semicolons or
# newlines, although the final function doesn't seem to require either.

function_list <- '{' space* eol* (command (eol / semicolon)+)* command? space* '}'

~space <- ' ' / '\t'
~eol <- '\r\n' / '\n' / '\r'
semicolon <- ';'

comment <- '#' (!eol .)*

# s/// {{{
substitute <-
  's' $sep<[/,1]>
  substitute_re $sep
  substitute_replacement $sep
  substitute_flags*
substitute_re <-          (('\\' $sep) / !$sep .)*
substitute_replacement <- (('\\' $sep) / !$sep .)*

# Quoting 1003.1-2001 section 4.11:
#
#   "A null pathname shall not be successfully resolved."
#
# OK, but what about a filename?  Quoting 1003.1-2001 section 3.169:
#
#   "A name consisting of 1 to {NAME_MAX} bytes used to name a file."
#
# GNU sed will accept a null string as an argument to the `w` flag, however.
# This results in ENOENT.

substitute_flags <-
  # chomp write first!
  write /
  # XXX flag nth should only appear once
  substitute_flag_nth / substitute_flag_global / substitute_flag_print
substitute_flag_global <- 'g'
substitute_flag_print <- 'p'
substitute_flag_nth <- [0-9]+
# }}}

print <- 'p'

# flow control
set_label <- ':' space* < label_name >
test <- 't' space* < label_name >?
branch <- 'b' space* < label_name >?
label_name <- [A-Za-z0-9]+

transliterate <- 'y' $sep<'/'> (!$sep .)* $sep (!$sep .)* $sep

write <- 'w' space* <write_argument>
write_argument <- (!eol .)+

change <- 'c' (!eol .)+

delete <- 'd'

append_next <- 'N'

